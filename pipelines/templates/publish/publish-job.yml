# This template is used to create an installer and update.txt file for the project.

parameters:
  - name: cycle
    type: string
    default: ''
  - name: buildConfiguration
    type: string
    default: ''
  - name: installerProjectPath
    type: string
    default: ''
  - name: buildName
    type: string
    default: ''
  - name: installerOutputPath
    type: string
    default: ''
  - name: installerMsiName
    type: string
    default: ''
  - name: buildCertificatePath
    type: string
    default: ''
  - name: buildParamsFilePath
    type: string
    default: ''
  - name: isSelfServe
    type: string
    default: 'false'
  - name: isAutoUpdater
    type: string
    default: 'false'
  - name: installerUpdateTxtUrl
    type: string
    default: ''
  - name: installerUpdateMsiUrl
    type: string
    default: ''
  - name: updateTextFileName
    type: string
    default: ''
  - name: updatesProjectFolder
    type: string
    default: ''
  - name: updatesProjectPath
    type: string
    default: ''
  - name: installerType
    type: string
    default: ''

steps:

# This task prints the matrix values.
- task: PowerShell@2
  displayName: 'Print matrix values'
  inputs:
    targetType: 'inline'
    script: |
      Write-Output "cycle: ${{ parameters.cycle }}"
      Write-Output "buildConfiguration: ${{ parameters.buildConfiguration }}"
      Write-Output "installerProjectPath: ${{ parameters.installerProjectPath }}"
      Write-Output "buildName: ${{ parameters.buildName }}"
      Write-Output "installerOutputPath: ${{ parameters.installerOutputPath }}"
      Write-Output "installerMsiName: ${{ parameters.installerMsiName }}"
      Write-Output "buildCertificatePath: ${{ parameters.buildCertificatePath }}"
      Write-Output "buildParamsFilePath: ${{ parameters.buildParamsFilePath }}"
      Write-Output "isSelfServe: ${{ parameters.isSelfServe }}"
      Write-Output "isAutoUpdater: ${{ parameters.isAutoUpdater }}"
      Write-Output "installerUpdateTxtUrl: ${{ parameters.installerUpdateTxtUrl }}"
      Write-Output "installerUpdateMsiUrl: ${{ parameters.installerUpdateMsiUrl }}"
      Write-Output "updateTextFileName: ${{ parameters.updateTextFileName }}"
      Write-Output "updatesProjectFolder: ${{ parameters.updatesProjectFolder }}"
      Write-Output "updatesProjectPath: ${{ parameters.updatesProjectPath }}"

# This task gets the version number from the installer-version.txt file.
- task: PowerShell@2
  displayName: 'Get installer version'
  inputs:
    filePath: ../datasnipper-source/pipelines/powershell-scripts/pipeline/get-installer-version-from-txt.ps1
    arguments: >
      -filePath "$(Pipeline.Workspace)\datasnipper-source\installer-version.txt"

# This task gets the custom tag from the installer-custom-tag.txt file.
- task: PowerShell@2
  displayName: 'Get custom tag'
  inputs:
    filePath: ../datasnipper-source/pipelines/powershell-scripts/pipeline/get-custom-tag-from-txt.ps1
    arguments: >
      -filePath "$(Pipeline.Workspace)\datasnipper-source\installer-custom-tag.txt"

# This task creates the installer folder.
- task: PowerShell@2
  displayName: 'Create installer folder'
  inputs:
    filePath: ../datasnipper-source/pipelines/powershell-scripts/pipeline/create-installer-folder.ps1
    arguments: >
      -installerOutputPath "${{ parameters.installerOutputPath }}"

# This task publishes the installer as an artifact.
- template: publish-artifact-task.yml
  parameters:
    cycle: ${{ parameters.cycle }}
    installerOutputPath: ${{ parameters.installerOutputPath }}
    installerType: $(InstallerType)